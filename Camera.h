#pragma once

#include "External_Libraries/glm/glm.hpp"
#include "External_Libraries/glm/vec2.hpp"
#include "External_Libraries/glm/vec3.hpp"

#include <cmath>
#include <vector>

#include <iostream>
#include <sstream>
#include <fstream>
class Camera
{
public:
	Camera();

	/*****************************************************************************************************************************************************************************************************************************************************
	 * @brief Camera constructor
	 *
	 * @return void
	 ******************************************************************************************************************************************************************************************************************************************************/

	Camera(glm::vec3 startPosition, glm::vec3 startUp, GLfloat startYaw, GLfloat startPitch, GLfloat initial_Movement_Speed, GLfloat initial_Rotation_Speed);


	/*****************************************************************************************************************************************************************************************************************************************************
	 * @brief keyboard_Input
	 *
	 * gets keyboard input made by the player
	 *
	 * @return void
	 ******************************************************************************************************************************************************************************************************************************************************/

	void keyboard_Input(bool* keyboard_Input, GLfloat time_Delta_Time);


	/*****************************************************************************************************************************************************************************************************************************************************
	 * @brief mouse_Input
	 *
	 * gets mouse input made by the player
	 *
	 * @return void
	 ******************************************************************************************************************************************************************************************************************************************************/

	void mouse_Input(GLfloat update_X_Position, GLfloat update_Y_Position);


	/*****************************************************************************************************************************************************************************************************************************************************
	 * @brief update_View_Matrix
	 *
	 * updates the current view matrix
	 *
	 * @return void
	 ******************************************************************************************************************************************************************************************************************************************************/

	glm::mat4 update_View_Matrix();



private:
	glm::vec3 fronty;
	glm::vec3 up;
	glm::vec3 righty;
	glm::vec3 worldUp;

	GLfloat yaw;
	GLfloat pitch;

	glm::vec3 player_Current_Position;
	GLfloat   player_Movement_Speed;
	GLfloat   player_Rotation_Speed;

	void update_Camera();
};
