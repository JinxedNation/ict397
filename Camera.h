#pragma once

#include "External_Libraries/glm/glm.hpp"
#include "External_Libraries/glm/vec2.hpp"
#include "External_Libraries/glm/vec3.hpp"

#include <cmath>
#include <vector>

#include <iostream>
#include <sstream>
#include <fstream>
class Camera
{
public:
	Camera();

		/*****************************************************************************************************************************************************************************************************************************************************
		* @brief Camera constructor
		*
		* @return void
		******************************************************************************************************************************************************************************************************************************************************/

	Camera(glm::vec3 startPosition, glm::vec3 startUp, float startYaw, float startPitch, float initial_Movement_Speed, float initial_Rotation_Speed);

	
	glm::mat4 update_View_Matrix();

		/*****************************************************************************************************************************************************************************************************************************************************
		* @brief launch_Lua
		*
		* launches an instance of lua
		*
		* @return void
		******************************************************************************************************************************************************************************************************************************************************/

	static void lau_Lua_Player_Input();


		/*****************************************************************************************************************************************************************************************************************************************************
		* @brief read_Player_Movement_Inputs
		*
		* reads the following movement inputs made by the player
		*
		* Move Foward      = w or W key 
		* Move Backward    = s or S
		* Move Left        = a or A
		* Move Right       = d or D
		*****************************************
		*
		* @return void
		******************************************************************************************************************************************************************************************************************************************************/

	void read_Player_Movement_Inputs(bool* player_Keyboard_Input, float deltaTime)
		
		
		/*****************************************************************************************************************************************************************************************************************************************************
		* @brief read_Game_Options_Inputs
		*
		* reads the following inputs from the player 
		*
		*
	 	* Display  helpful instructions = m or M
	 	* Display  terrain wireframe    = k or K
		* Quit the current game         = x or X
		******************************************
		*
		*
		* @return void
		******************************************************************************************************************************************************************************************************************************************************/

	void read_Game_Options_Inputs(bool* player_Keyboard_Input)

	

		/*****************************************************************************************************************************************************************************************************************************************************
		* @brief mouse_Input
		*
		* gets mouse input made by the player
		*
		* @return void
		******************************************************************************************************************************************************************************************************************************************************/

	void mouse_Input(float update_X_Position, float update_Y_Position);



	


	/*****************************************************************************************************************************************************************************************************************************************************
	 * @brief update_View_Matrix
	 *
	 * updates the current view matrix
	 *
	 * @return void
	 ******************************************************************************************************************************************************************************************************************************************************/





private:

	float   camera_Zoom;

	float   player_Movement_Speed;
	float   camera_Rotation_Speed;
	

	glm::vec3 up;
	glm::vec3 y_Plane_Movement;
	glm::vec3 x_Plane_Movement;
	glm::vec3 worldUp;


	float yaw;
	float pitch;

	glm::vec3 player_Current_Position;


	void update_Camera();
};
